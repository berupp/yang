// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1600

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1746

var yyAct = [...]int16{
	13, 347, 472, 655, 646, 287, 346, 637, 590, 573,
	314, 286, 477, 550, 312, 537, 414, 356, 308, 352,
	530, 408, 273, 404, 301, 215, 377, 48, 49, 343,
	367, 385, 214, 331, 319, 300, 262, 47, 241, 45,
	230, 46, 255, 44, 222, 310, 194, 209, 43, 42,
	41, 40, 39, 450, 198, 188, 6, 175, 311, 483,
	484, 666, 96, 298, 170, 16, 436, 75, 584, 428,
	5, 3, 26, 190, 172, 31, 171, 205, 75, 75,
	448, 499, 505, 26, 26, 75, 11, 664, 31, 186,
	26, 104, 105, 106, 28, 454, 457, 455, 456, 673,
	4, 178, 478, 479, 662, 28, 28, 181, 22, 193,
	180, 202, 28, 170, 212, 634, 226, 232, 172, 582,
	171, 170, 170, 621, 169, 620, 246, 258, 265, 290,
	304, 304, 27, 322, 170, 334, 247, 345, 355, 370,
	380, 388, 269, 407, 243, 417, 644, 150, 361, 238,
	242, 196, 170, 581, 619, 170, 618, 203, 398, 350,
	349, 475, 474, 338, 373, 350, 349, 580, 400, 306,
	306, 372, 324, 274, 189, 178, 579, 617, 399, 616,
	578, 523, 397, 239, 396, 522, 268, 176, 193, 395,
	394, 393, 392, 391, 316, 191, 521, 200, 202, 497,
	210, 496, 224, 231, 420, 206, 75, 96, 473, 212,
	185, 26, 244, 256, 263, 288, 302, 302, 26, 320,
	184, 332, 226, 344, 353, 368, 378, 386, 182, 405,
	232, 415, 426, 28, 183, 259, 275, 296, 631, 451,
	28, 246, 26, 427, 203, 471, 357, 470, 382, 613,
	608, 247, 431, 189, 606, 258, 435, 605, 462, 243,
	461, 176, 265, 526, 28, 242, 444, 75, 524, 432,
	449, 228, 26, 199, 191, 520, 269, 238, 27, 460,
	12, 476, 439, 446, 200, 445, 144, 290, 143, 452,
	453, 518, 487, 480, 28, 210, 535, 467, 469, 75,
	304, 142, 27, 141, 26, 515, 513, 274, 224, 75,
	511, 75, 507, 75, 26, 190, 231, 31, 26, 322,
	268, 494, 492, 438, 438, 491, 28, 244, 489, 218,
	219, 334, 27, 486, 468, 490, 28, 466, 458, 306,
	28, 256, 136, 345, 135, 134, 442, 133, 263, 443,
	434, 196, 355, 493, 132, 115, 131, 114, 324, 338,
	644, 425, 361, 259, 495, 217, 52, 370, 441, 421,
	275, 504, 500, 288, 27, 168, 167, 380, 27, 350,
	349, 177, 110, 140, 109, 388, 302, 139, 100, 192,
	99, 201, 373, 196, 211, 296, 225, 508, 138, 372,
	137, 130, 398, 512, 407, 320, 245, 257, 264, 289,
	303, 303, 400, 321, 417, 333, 514, 332, 354, 369,
	379, 387, 399, 406, 129, 416, 397, 516, 396, 344,
	519, 128, 127, 395, 394, 393, 392, 391, 353, 509,
	510, 126, 125, 117, 116, 113, 75, 533, 108, 475,
	474, 26, 627, 368, 98, 177, 146, 149, 463, 75,
	357, 447, 541, 378, 26, 199, 545, 179, 192, 433,
	538, 386, 576, 28, 540, 195, 546, 204, 201, 430,
	216, 438, 438, 237, 555, 382, 28, 557, 75, 211,
	405, 539, 248, 26, 429, 423, 315, 315, 593, 328,
	415, 339, 225, 348, 124, 374, 290, 401, 595, 410,
	544, 419, 600, 118, 112, 28, 628, 604, 75, 506,
	670, 245, 465, 26, 27, 166, 350, 349, 165, 163,
	533, 162, 161, 531, 159, 257, 158, 598, 157, 424,
	294, 179, 264, 196, 156, 28, 525, 541, 610, 293,
	609, 545, 612, 27, 195, 538, 599, 155, 574, 540,
	154, 546, 153, 614, 204, 527, 622, 289, 152, 151,
	122, 555, 121, 576, 557, 216, 539, 623, 120, 547,
	303, 119, 630, 27, 591, 94, 93, 650, 570, 571,
	593, 645, 288, 561, 659, 544, 237, 654, 632, 321,
	595, 661, 562, 65, 600, 290, 583, 248, 585, 586,
	487, 333, 299, 587, 296, 64, 531, 318, 639, 641,
	649, 317, 658, 66, 640, 272, 602, 603, 291, 598,
	261, 260, 354, 62, 75, 254, 75, 639, 641, 26,
	75, 26, 607, 640, 665, 26, 649, 369, 599, 279,
	668, 253, 61, 376, 375, 658, 669, 379, 671, 574,
	71, 28, 280, 28, 672, 387, 315, 28, 271, 366,
	313, 313, 365, 327, 70, 208, 591, 270, 360, 309,
	309, 207, 326, 33, 406, 328, 589, 362, 217, 284,
	86, 288, 217, 588, 416, 75, 340, 339, 337, 27,
	26, 27, 330, 329, 638, 27, 647, 67, 656, 348,
	75, 384, 667, 296, 383, 26, 72, 661, 295, 75,
	285, 459, 28, 638, 26, 63, 252, 532, 251, 642,
	636, 560, 647, 374, 653, 558, 556, 28, 554, 553,
	635, 656, 213, 551, 549, 548, 28, 217, 663, 653,
	249, 401, 575, 292, 240, 60, 266, 363, 305, 305,
	27, 323, 217, 335, 351, 69, 358, 371, 381, 389,
	410, 409, 403, 418, 75, 27, 402, 73, 592, 26,
	419, 572, 250, 251, 27, 276, 289, 279, 342, 68,
	413, 97, 412, 74, 674, 536, 236, 675, 75, 235,
	280, 28, 271, 277, 278, 252, 234, 233, 566, 568,
	532, 270, 229, 35, 534, 529, 101, 102, 103, 528,
	107, 227, 223, 111, 221, 220, 217, 34, 86, 559,
	51, 50, 38, 37, 437, 197, 552, 213, 577, 27,
	313, 30, 75, 187, 629, 29, 174, 26, 411, 309,
	123, 173, 75, 575, 565, 23, 36, 26, 567, 327,
	21, 20, 563, 19, 601, 18, 17, 148, 326, 28,
	592, 15, 14, 10, 9, 8, 2, 564, 160, 28,
	569, 267, 164, 307, 307, 289, 325, 1, 336, 76,
	266, 359, 360, 145, 390, 147, 341, 0, 90, 0,
	648, 362, 657, 75, 217, 284, 0, 27, 26, 0,
	252, 0, 251, 0, 0, 0, 559, 27, 75, 0,
	633, 0, 0, 26, 75, 0, 648, 0, 305, 26,
	28, 279, 85, 0, 0, 657, 0, 80, 79, 577,
	89, 77, 78, 81, 280, 28, 82, 323, 0, 87,
	0, 28, 0, 88, 83, 84, 601, 0, 0, 335,
	0, 0, 0, 0, 90, 0, 250, 91, 27, 92,
	217, 284, 86, 0, 411, 0, 217, 0, 0, 0,
	358, 0, 0, 27, 643, 0, 652, 297, 660, 27,
	0, 0, 543, 0, 0, 371, 0, 0, 0, 0,
	0, 542, 0, 643, 0, 381, 0, 0, 0, 440,
	0, 0, 652, 389, 0, 267, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 409, 26, 0, 252, 0, 251, 597, 0,
	0, 279, 418, 464, 0, 0, 0, 596, 0, 0,
	0, 0, 0, 307, 280, 28, 0, 277, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 481, 482, 0, 485, 543, 75, 0,
	217, 284, 86, 611, 336, 0, 542, 0, 252, 488,
	251, 250, 85, 27, 279, 0, 282, 80, 79, 0,
	89, 77, 78, 81, 283, 359, 82, 280, 0, 87,
	277, 278, 0, 88, 83, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 594, 91, 0, 92,
	597, 0, 86, 498, 0, 86, 0, 0, 390, 596,
	0, 501, 502, 75, 250, 422, 0, 7, 26, 53,
	0, 31, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 80, 79, 56, 89, 77, 78, 81, 0,
	28, 82, 0, 0, 87, 0, 54, 55, 88, 83,
	84, 0, 0, 0, 0, 24, 25, 0, 0, 90,
	0, 0, 91, 0, 92, 0, 0, 86, 32, 0,
	57, 0, 0, 517, 0, 0, 0, 0, 27, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	75, 0, 95, 0, 7, 26, 53, 0, 31, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 651, 80,
	79, 56, 89, 77, 78, 81, 0, 28, 82, 0,
	0, 87, 0, 54, 55, 88, 83, 84, 0, 0,
	0, 0, 24, 25, 651, 0, 90, 0, 0, 91,
	0, 92, 0, 0, 86, 32, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 27, 0, 75, 0, 0,
	58, 7, 26, 53, 0, 31, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 59, 80, 79, 56, 89,
	77, 78, 81, 0, 28, 82, 0, 0, 87, 0,
	54, 55, 88, 83, 84, 0, 0, 0, 0, 24,
	25, 0, 0, 90, 615, 0, 91, 0, 92, 0,
	0, 86, 32, 0, 57, 0, 0, 624, 625, 626,
	0, 75, 27, 0, 0, 0, 26, 58, 0, 0,
	0, 0, 0, 281, 279, 85, 282, 0, 0, 0,
	80, 79, 59, 89, 77, 78, 81, 280, 28, 82,
	277, 278, 87, 0, 0, 0, 88, 83, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	91, 0, 92, 217, 284, 86, 75, 0, 0, 0,
	0, 26, 0, 0, 0, 0, 27, 0, 0, 279,
	85, 0, 0, 0, 0, 80, 79, 283, 89, 77,
	78, 81, 280, 28, 82, 0, 0, 87, 0, 0,
	0, 88, 83, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 91, 0, 92, 217, 284,
	86, 0, 0, 75, 0, 503, 0, 0, 26, 0,
	0, 27, 251, 0, 0, 297, 279, 85, 0, 0,
	0, 0, 80, 79, 0, 89, 77, 78, 81, 280,
	28, 82, 0, 0, 87, 364, 0, 0, 88, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 91, 75, 92, 217, 284, 86, 26, 0,
	0, 0, 251, 0, 0, 0, 279, 85, 27, 0,
	0, 0, 80, 79, 0, 89, 77, 78, 81, 280,
	28, 82, 0, 0, 87, 364, 0, 0, 88, 83,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 91, 75, 92, 217, 284, 86, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 27, 0,
	0, 0, 80, 79, 0, 89, 77, 78, 81, 0,
	28, 82, 0, 0, 87, 0, 0, 0, 88, 83,
	84, 0, 75, 0, 0, 0, 0, 26, 0, 90,
	0, 0, 91, 0, 92, 217, 85, 86, 0, 0,
	0, 80, 79, 0, 89, 77, 78, 81, 27, 28,
	82, 0, 0, 87, 0, 0, 0, 88, 83, 84,
	0, 75, 0, 0, 0, 0, 26, 0, 90, 0,
	0, 91, 0, 92, 0, 85, 86, 0, 0, 0,
	80, 79, 0, 89, 0, 0, 81, 27, 28, 82,
	0, 0, 87, 364, 0, 0, 88, 83, 84, 252,
	0, 251, 0, 0, 0, 279, 0, 282, 0, 0,
	0, 0, 0, 217, 284, 0, 0, 0, 280, 0,
	0, 277, 278, 0, 0, 0, 27, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 250,
}

var yyPact = [...]int16{
	46, -1000, 1290, 582, 581, 1223, -1000, 449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 380, 449, 449, 449, 18, 449, 440,
	374, 449, 509, 437, 347, 436, 435, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 508, 577, 574, 568, 566, 449, 499,
	434, 433, 424, 423, 416, 393, 346, 337, 334, 392,
	390, 379, 375, 293, 278, 451, 1290, 565, 564, 558,
	556, 553, 540, 534, 532, 530, 449, 528, 527, 525,
	449, 524, 521, 368, 367, -1000, -1000, 66, -1000, -1000,
	481, 100, 97, 66, 224, 210, 200, 79, 302, -1000,
	452, 67, 195, 306, -1000, 206, 199, 73, -1000, -1000,
	-1000, -1000, -1000, 9, -1000, 896, 1605, 1354, 1409, 1021,
	1021, -1000, 629, -1000, 845, -1000, 439, 1516, 306, 1566,
	1644, -1000, 917, -1000, 633, 194, 361, -1000, 9, -1000,
	1136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9, -1000, -1000, -1000, 9, -1000, -1000, -1000, -1000, -1000,
	490, -1000, 304, 352, 481, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 60, -1000, -1000,
	489, -1000, -1000, -1000, -1000, -1000, 474, 260, -1000, 464,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 341, 306, -1000,
	-1000, -1000, -1000, -1000, 1071, 1071, -1000, 449, 360, 338,
	340, 206, -1000, -1000, -1000, -1000, -1000, 275, 456, 71,
	-1000, -1000, -1000, -1000, 231, 231, 231, -1000, 16, 329,
	712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 250,
	453, 449, 518, 328, 1605, -1000, -1000, -1000, -1000, -1000,
	325, 1354, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 237, 156, 444, 55,
	55, 449, 449, -25, 449, 324, 1409, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 449, 319, 1021,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 316, 313, 629, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312,
	845, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	191, 449, 72, -1000, -1000, -1000, -1000, -1000, -1000, 449,
	449, 1466, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 74, 515, 303, 306, -1000, -1000, -1000,
	-1000, -1000, 1071, 1071, -1000, 301, 1566, -1000, -1000, -1000,
	-1000, -1000, -1000, 297, 1644, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 296, 917, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 449, 282, 633, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 266, -1000, -1000, -1000, -1000, 186,
	175, -1000, -1000, 171, -1000, -1000, 259, 1071, -1000, 254,
	66, -1000, -1000, -1000, -1000, -1000, 230, -1000, -1000, -1000,
	-1000, 1675, -1000, -1000, 110, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 791, 110, 66, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, 170, 166, -1000, -1000, 157, 143, -1000, -1000,
	109, 66, 58, 110, 110, 9, -1000, -1000, 66, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 767, 9, -1000,
	-1000, 66, 66, -1000, -1000, 1409, -1000, -1000, -1000, 248,
	245, -1000, -1000, -1000, -1000, -1000, -1000, 66, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241, 230,
	-1000, -1000, -1000, -1000, -1000, 55, 1074, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 240, 791,
	-1000, -1000, 449, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	169, 146, 115, 444, 55, 449, 449, 449, 447, 512,
	-1000, -1000, 835, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 229, 767,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 911, -1000, -1000, -1000, -1000, -1000,
	105, -1000, -1000, -1000, -1000, 66, -1000, 292, -1000, 688,
	-1000, 627, 94, 110, 9, 9, 9, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 78, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -8, 703, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 444, 511, -1000, -1000, -1000, -1000, -1000,
	-1000, 444, -1000, -1000, -1000, -1000, 89, -1000, -1000, 110,
	-1000, -1000, 110, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 12, 2, 895, 791, 893, 366, 889, 124, 887,
	876, 70, 56, 875, 874, 873, 86, 280, 0, 872,
	871, 65, 866, 865, 863, 861, 860, 108, 856, 855,
	851, 846, 57, 845, 843, 55, 46, 841, 835, 54,
	66, 834, 833, 832, 52, 51, 50, 49, 48, 43,
	39, 41, 37, 27, 28, 831, 830, 827, 825, 824,
	44, 822, 821, 819, 815, 20, 814, 813, 812, 40,
	807, 806, 53, 799, 796, 795, 15, 18, 22, 10,
	549, 540, 58, 14, 24, 793, 792, 790, 16, 628,
	789, 788, 29, 6, 1, 785, 753, 781, 9, 777,
	776, 772, 23, 21, 765, 764, 19, 17, 757, 11,
	755, 754, 38, 750, 745, 744, 13, 743, 739, 738,
	736, 735, 731, 730, 7, 729, 725, 720, 5, 718,
	716, 714, 711, 31, 707, 703, 702, 33, 698, 696,
	8, 693, 686, 683, 681, 675, 47, 32, 25, 674,
	672, 669, 30, 660, 654, 653, 26, 652, 651, 635,
	42, 633, 631, 630, 36, 625, 45, 623, 621, 617,
	34, 615, 63, 612, 35, 603, 602, 597, 3, 594,
	593, 591, 4, 587,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 32, 32, 32, 32, 33, 34, 34, 21, 35,
	35, 35, 35, 35, 35, 35, 19, 37, 38, 38,
	39, 39, 39, 39, 39, 39, 20, 20, 36, 40,
	40, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 41, 41, 24,
	24, 57, 58, 58, 59, 59, 60, 60, 60, 60,
	61, 61, 62, 63, 63, 64, 64, 65, 65, 65,
	65, 66, 25, 67, 68, 68, 69, 69, 69, 69,
	69, 69, 69, 70, 71, 73, 74, 72, 75, 75,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 56,
	56, 85, 86, 86, 87, 87, 88, 88, 88, 88,
	88, 50, 50, 90, 91, 91, 92, 92, 92, 92,
	92, 93, 94, 89, 95, 96, 96, 97, 97, 98,
	98, 98, 98, 55, 55, 99, 100, 100, 101, 101,
	102, 102, 102, 102, 102, 102, 103, 51, 105, 105,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	104, 107, 108, 42, 110, 111, 111, 112, 112, 112,
	112, 112, 112, 112, 3, 3, 79, 84, 84, 113,
	114, 114, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 122, 122, 122, 123, 123,
	124, 124, 124, 124, 124, 124, 125, 121, 17, 17,
	17, 120, 45, 126, 127, 127, 109, 109, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 129, 130, 54,
	131, 131, 132, 132, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 49, 49, 135, 135, 136, 136, 137, 137, 137,
	137, 137, 137, 137, 137, 139, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 138, 138, 141,
	142, 142, 23, 143, 144, 144, 145, 145, 146, 146,
	146, 146, 146, 146, 146, 147, 148, 52, 149, 150,
	150, 151, 151, 152, 152, 152, 152, 152, 152, 152,
	53, 153, 154, 154, 155, 155, 156, 156, 156, 156,
	156, 43, 157, 158, 158, 159, 159, 160, 160, 160,
	160, 44, 161, 162, 163, 163, 82, 82, 83, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 166, 166, 165, 78, 48, 48, 168, 169,
	169, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	167, 167, 46, 171, 172, 173, 173, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 81, 4, 4, 2, 2, 1, 1, 80,
	47, 175, 119, 119, 176, 177, 177, 178, 178, 178,
	178, 178, 179, 118, 118, 180, 181, 181, 182, 182,
	182, 182, 182, 182, 183, 16, 18, 14, 15, 22,
	77, 8, 8, 6, 6, 7, 5, 5,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 2, 1, 2, 3, 1,
	3, 1, 1, 1, 1, 1, 4, 2, 1, 2,
	3, 1, 1, 1, 1, 1, 2, 4, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	2, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 3, 4, 2, 1, 2, 1, 1, 1, 2,
	2, 2, 1, 3, 2, 2, 2, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 3, 3, 3, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 4, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 4, 2, 4, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 2,
	0, 1, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 2, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 2, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 4, 2, 1, 1, 2, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 2, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 3,
	4, 2, 2, 4, 2, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 3, 3, 3, 0, 1,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -33,
	-37, 15, 62, -143, -57, -67, -28, -42, -43, -44,
	-45, -46, -47, -48, -49, -50, -51, -52, -53, -54,
	-55, -56, -6, 13, 40, 41, 28, 64, 77, 92,
	-110, -157, -161, -126, -171, -175, -167, -134, -90, -104,
	-149, -153, -130, -99, -85, 7, -7, 30, 31, 27,
	26, 32, 35, 43, 44, 21, 61, 38, 42, 29,
	53, 56, 58, 4, 4, 9, -12, -4, 5, 10,
	8, -4, -4, -4, 73, 74, 75, -4, 8, 10,
	8, -4, 5, 8, 10, 8, 8, 8, 5, 4,
	4, 4, 4, -4, 5, 8, 8, 8, 8, 8,
	8, 10, 8, 10, 8, 10, 8, 8, 8, 8,
	8, 10, 8, 10, 8, -5, 5, -3, -4, 6,
	-11, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, 4, -4, 4, 4, 8, 8, -8,
	55, 10, 8, -30, -31, -32, -16, -17, -18, -6,
	10, 10, -8, 10, 10, 10, 10, -34, -35, -21,
	13, -16, -17, -18, -36, -6, 91, -38, -39, 13,
	-16, -17, -18, -36, -6, 10, 10, -144, -145, -146,
	-16, -17, -18, -89, -147, -148, -6, 59, 23, 24,
	-58, -59, -60, -61, -16, -17, -18, -62, 65, -68,
	-69, -16, -18, -70, -71, -73, -74, -6, 78, -21,
	-111, -112, -84, -77, -16, -17, -18, -79, -6, -113,
	70, 16, 14, -158, -159, -160, -16, -17, -18, -27,
	-162, -163, -164, -16, -17, -18, -89, -96, -82, -83,
	-80, -81, -165, -78, -166, -27, -95, 36, 37, 20,
	33, 19, 22, 83, 60, -127, -109, -128, -16, -17,
	-18, -89, -96, -80, -81, -129, -27, 76, -172, -173,
	-174, -84, -16, -17, -18, -89, -50, -96, -77, -80,
	-166, -82, -83, -81, -79, -6, -172, -168, -169, -170,
	-16, -17, -18, -89, -50, -96, -80, -81, -6, -135,
	-136, -137, -16, -17, -18, -89, -96, -138, -54, -6,
	-139, 51, -91, -92, -16, -18, -93, -94, -6, 88,
	87, -105, -106, -16, -17, -18, -107, -27, -89, -96,
	-81, -79, -80, -108, 39, -150, -151, -152, -16, -17,
	-18, -89, -147, -148, -6, -154, -155, -156, -16, -17,
	-18, -89, -27, -131, -132, -133, -16, -17, -18, -89,
	-96, -44, -45, -46, -47, -48, -49, -51, -107, -52,
	-53, -6, -100, -101, -102, -16, -17, -18, -103, -89,
	-6, 57, -86, -87, -88, -16, -17, -18, -89, -6,
	10, 8, 9, 5, -6, 9, -32, -35, 9, 5,
	5, -39, 9, 5, 9, -146, -40, -41, -27, -40,
	-4, 8, 8, 9, -60, 10, 8, 5, 9, -69,
	-72, 8, -72, -72, 79, 81, 82, 80, 9, 9,
	-112, 10, 8, 5, -4, 4, 9, -160, 9, -164,
	10, 8, -2, 52, 6, 5, -2, -1, 47, 48,
	-1, -4, -4, 84, 85, -4, 9, -128, -4, 9,
	-174, 9, 9, -170, 9, -137, 10, 8, -4, 9,
	-92, -4, -4, 9, -106, 8, 4, 9, -152, -40,
	-40, 9, -156, 9, -133, 9, -102, -4, 9, -88,
	9, 10, 10, 10, 9, -27, 9, -8, -63, -64,
	-65, -16, -17, -18, -66, 66, -75, -76, -77, -50,
	-78, -79, -80, -81, -82, -83, -84, -8, -114, -115,
	-116, -117, 45, -118, -119, -103, -120, -84, -121, -6,
	-122, -180, -176, 71, 86, 63, 17, 67, 18, 89,
	-8, -8, -97, -98, -16, -17, -18, -6, 10, 10,
	10, 10, 10, -8, 10, -8, -8, -8, -141, -142,
	-140, -16, -17, -18, -89, -79, -80, -81, -50, -82,
	-83, -6, -8, -8, -109, 9, 9, -8, 9, -65,
	-1, 9, -76, 9, -116, -4, 10, 8, 10, 8,
	10, 8, -2, -1, -4, -4, -4, 5, 4, 9,
	-98, 9, -140, 9, 10, -8, -123, -124, -16, -18,
	-93, -94, -125, -6, 68, -181, -182, -16, -17, -18,
	-183, -89, -6, 46, -177, -178, -16, -17, -18, -179,
	-6, 90, 10, -8, 9, -124, 69, 9, -182, -2,
	9, -178, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 5, 0, 423, 25,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 314, 79, 82, 0, 0, 24, 35,
	47, 313, 81, 103, 22, 0, 353, 0, 244, 0,
	0, 386, 0, 281, 283, 141, 0, 0, 329, 342,
	260, 163, 166, 129, 132, 0, 423, 467, 204, 205,
	0, 194, 352, 362, 243, 403, 431, 400, 401, 280,
	143, 190, 328, 341, 258, 165, 131, 2, 3, 6,
	0, 461, 0, 0, 28, 29, 31, 32, 33, 34,
	457, 458, 455, 238, 239, 240, 456, 0, 36, 39,
	0, 41, 42, 43, 44, 45, 0, 0, 48, 0,
	51, 52, 53, 54, 55, 38, 459, 0, 315, 316,
	318, 319, 320, 321, 59, 59, 324, 0, 0, 0,
	0, 83, 84, 86, 87, 88, 89, 0, 0, 0,
	104, 106, 107, 108, 0, 0, 0, 112, 0, 0,
	0, 195, 197, 198, 199, 200, 201, 202, 203, 0,
	0, 0, 0, 0, 354, 355, 357, 358, 359, 360,
	0, 363, 364, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 379, 380, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 246, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 404,
	405, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 419, 420, 421, 0, 0, 388, 389,
	391, 392, 393, 394, 395, 396, 397, 398, 399, 0,
	284, 285, 287, 288, 289, 290, 291, 292, 293, 294,
	0, 0, 0, 144, 146, 147, 148, 149, 150, 0,
	0, 0, 178, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 0, 0, 0, 330, 331, 333, 334,
	335, 336, 59, 59, 339, 0, 343, 344, 346, 347,
	348, 349, 350, 0, 261, 262, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 167, 168, 170, 171, 172, 173, 174,
	175, 0, 0, 133, 134, 136, 137, 138, 139, 140,
	463, 465, 464, 424, 0, 26, 30, 37, 46, 0,
	0, 49, 57, 0, 312, 317, 0, 60, 77, 0,
	0, 325, 326, 80, 85, 90, 93, 92, 102, 105,
	109, 0, 110, 111, 0, 114, 115, 116, 23, 193,
	196, 207, 210, 0, 0, 209, 351, 356, 361, 365,
	155, 0, 0, 0, 425, 426, 0, 0, 427, 428,
	0, 0, 0, 0, 0, 154, 242, 247, 0, 402,
	406, 430, 387, 390, 282, 286, 307, 0, 295, 142,
	145, 0, 0, 177, 179, 0, 192, 327, 332, 0,
	0, 340, 345, 259, 263, 164, 169, 0, 130, 135,
	462, 40, 58, 50, 322, 78, 323, 153, 0, 94,
	95, 97, 98, 99, 100, 0, 0, 118, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 113, 0, 211,
	212, 214, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	460, 206, 0, 157, 159, 160, 161, 162, 366, 367,
	368, 429, 422, 384, 385, 382, 383, 257, 0, 309,
	310, 296, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 151, 152, 0, 337, 338, 176, 91, 96,
	0, 117, 119, 208, 213, 0, 223, 0, 443, 0,
	432, 0, 0, 0, 225, 226, 227, 445, 434, 156,
	158, 308, 311, 191, 101, 215, 0, 228, 230, 231,
	232, 233, 234, 235, 0, 0, 446, 448, 449, 450,
	451, 452, 453, 0, 0, 435, 437, 438, 439, 440,
	441, 0, 241, 237, 224, 229, 0, 444, 447, 0,
	433, 436, 0, 236, 454, 442,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:282
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:295
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:313
		{
			yylex.(*lexer).stack.pop()
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:318
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:339
		{
			yylex.(*lexer).stack.pop()
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:342
		{
			yylex.(*lexer).stack.pop()
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:347
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:378
		{
			yylex.(*lexer).stack.pop()
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:381
		{
			yylex.(*lexer).stack.pop()
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:386
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:408
		{
			yylex.(*lexer).stack.pop()
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:411
		{
			yylex.(*lexer).stack.pop()
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:416
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:438
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:447
		{
			yylex.(*lexer).stack.pop()
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:452
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:480
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:489
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:498
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:507
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:516
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:539
		{
			yylex.(*lexer).stack.pop()
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:542
		{
			yylex.(*lexer).stack.pop()
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			yylex.(*lexer).stack.pop()
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:574
		{
			yylex.(*lexer).stack.pop()
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:579
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:598
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:607
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:616
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:625
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:634
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:637
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:654
		{
			yylex.(*lexer).stack.pop()
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:683
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:692
		{
			yylex.(*lexer).stack.pop()
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:713
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:722
		{
			yylex.(*lexer).stack.pop()
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:736
		{
			yylex.(*lexer).stack.pop()
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:741
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:762
		{
			yyVAL.token = yyDollar[1].token
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:763
		{
			yyVAL.token = yyDollar[1].token
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:766
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:775
		{
			yylex.(*lexer).stack.pop()
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:778
		{
			yylex.(*lexer).stack.pop()
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:783
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:800
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:816
		{
			yylex.(*lexer).stack.pop()
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:819
		{
			yylex.(*lexer).stack.pop()
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:824
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:831
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:838
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:858
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:864
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:878
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:887
		{
			yylex.(*lexer).stack.pop()
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:892
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:920
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:929
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:938
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:977
		{
			yylex.(*lexer).stack.pop()
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:980
		{
			yylex.(*lexer).stack.pop()
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1002
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1025
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1028
		{
			yylex.(*lexer).stack.pop()
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1040
		{
			yylex.(*lexer).stack.pop()
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1045
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1065
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1068
		{
			yylex.(*lexer).stack.pop()
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1074
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1083
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1095
		{
			yylex.(*lexer).stack.pop()
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1100
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1123
		{
			yylex.(*lexer).stack.pop()
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1132
		{
			yylex.(*lexer).stack.pop()
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1137
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1161
		{
			yylex.(*lexer).stack.pop()
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1166
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1188
		{
			yylex.(*lexer).stack.pop()
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1193
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1210
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1226
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1251
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1258
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1267
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1276
		{
			l := yylex.(*lexer)
			l.builder.Unique(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			yylex.(*lexer).stack.pop()
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1288
		{
			yylex.(*lexer).stack.pop()
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1312
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1319
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1328
		{
			yylex.(*lexer).stack.pop()
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1369
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1378
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1386
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1394
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1405
		{
			yyVAL.boolean = true
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1406
		{
			yyVAL.boolean = false
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1409
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1421
		{
			yylex.(*lexer).stack.pop()
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1426
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1435
		{
			yylex.(*lexer).stack.pop()
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1438
		{
			yylex.(*lexer).stack.pop()
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1443
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1471
		{
			yylex.(*lexer).stack.pop()
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1474
		{
			yylex.(*lexer).stack.pop()
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1479
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1499
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1508
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1517
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1535
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1544
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1553
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.ext = nil
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1565
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.stack.pop().(*meta.Extension)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1585
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			l.stack.push(yyVAL.ext)
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1595
		{
			yyVAL.token = ""
		}
	}
	goto yystack /* stack new state and value */
}
